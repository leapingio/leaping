import argparse
import select
import signal
import sys
from socket import socket, AF_INET, SOCK_STREAM
import threading
import time

global stop_spinner
stop_spinner = threading.Event()


def spinner_animation(message="Loading..."):
    spinner_chars = ['|', '/', '-', '\\']
    idx = 0
    while not stop_spinner.is_set():
        print(f"\r{message} \U0001F914 {spinner_chars[idx % len(spinner_chars)]}", end='')
        idx += 1
        time.sleep(0.1)
    print('\r', end='')

def create_spinner():
    global stop_spinner
    stop_spinner.clear()
    spinner_thread = threading.Thread(target=spinner_animation, args=("Thinking...",))
    spinner_thread.start()
    return spinner_thread

def stop_spinner_animation(spinner_thread):
    stop_spinner.set()
    spinner_thread.join()


def main():
    parser = argparse.ArgumentParser(description="W")
    parser.add_argument('-p', '--port', type=int, help='The temporary file generated by pytest-leaping', required=True)

    args = parser.parse_args()
    if not args.port:
        raise ValueError("Port number not provided. Exiting...")

    global stop_spinner

    print(""" 
 _                     _             
| |    ___  __ _ _ __ (_)_ __   __ _ 
| |   / _ \\/ _` | '_ \\| | '_ \\ / _` |
| |__|  __/ (_| | |_) | | | | | (_| |
|_____\\___|\\__,_| .__/|_|_| |_|\\__, |
                |_|            |___/ 
""")

    sock = socket(AF_INET, SOCK_STREAM)
    sock.connect(('localhost', args.port))

    sigint_received = False


    def signal_handler(sig, frame):
        global sigint_received
        sigint_received = True
        sys.exit(0)
        sys.exit(0)
        # You can also initiate cleanup here if needed

    spinner = create_spinner()
    stop_sent = False
    sock.setblocking(False)
    signal.signal(signal.SIGINT, signal_handler)

    def receive_output_from_server():
        while not stop_sent and not sigint_received:
            # Check if the socket is ready for reading
            ready_to_read, _, _ = select.select([sock], [], [], 0.1)
            if ready_to_read:
                response = sock.recv(2048)
                if response:
                    stop_spinner_animation(spinner)
                    if response == b"LEAPING_STOP":
                        break
                    print(f"\033[61m{response.decode('utf-8')}\033[0m", end="")

    receive_output_from_server()
    print("\n")

    while True:
        user_input = input("\n If the explanation is wrong, say why and we'll try again. Press q to exit:  \n> ")

        if user_input.strip() == "q" or user_input.strip() == "exit":
            sock.sendall(b"exit")
            break
        elif user_input.strip() == "":  # Check if the input is just an Enter key press (empty string)
            continue  # Skip the rest of the loop and prompt again
        sock.sendall(user_input.encode("utf-8"))
        spinner = create_spinner()
        receive_output_from_server()
